" VIM Default settings
runtime! debian.vim
if has("syntax")
  syntax on
endif

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

set number relativenumber
set noswapfile

" Tab Spacing
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2

command Q q
command W w

" Hotkeys
let mapleader="\<Space>"
map Q <Nop>
imap jj <esc>
nmap j gj
nmap k gk
nmap <C-a> gg<S-v><S-g>
nmap 0 ^

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" nnoremap <silent> <leader>p :FZF<CR>
nnoremap <silent> <leader>p :CtrlP<CR>
" nnoremap <silent> <leader>P :FZF ~<CR>

nnoremap <leader>f :CtrlSF<space>
nmap <leader>F <Plug>CtrlSFCwordPath<CR>
vmap <leader>F <Plug>CtrlSFVwordExec

nmap <leader>V viwpyiw
vmap <leader>V pyiw
nmap <silent> <leader>R :TestFile<CR>
nmap <silent> <leader>r :TestNearest<CR>
" nnoremap <leader>R :call RunCurrentSpecFile()<CR>
" nnoremap <leader>r :call RunNearestSpec()<CR>

nnoremap <leader>g :Git blame<CR>
nnoremap <leader>o i<CR><esc>
nnoremap <leader>tn :tabnew .<space>

"nerdTree
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
" nnoremap <C-f> :NERDTreeFind<CR>

" vim-plugin
call plug#begin('~/.vim/plugged')
" Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
" Plug 'junegunn/fzf.vim'
Plug 'ctrlpvim/ctrlp.vim'

Plug 'tpope/vim-rails'
Plug 'tpope/vim-surround'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-fugitive'

Plug 'terryma/vim-multiple-cursors'

Plug 'editorconfig/editorconfig-vim'
Plug 'airblade/vim-gitgutter'
Plug 'frazrepo/vim-rainbow'

Plug 'tpope/vim-commentary'
" Plug 'tpope/vim-dispatch'

Plug 'rking/ag.vim'
Plug 'dyng/ctrlsf.vim'
Plug 'thoughtbot/vim-rspec'
Plug 'preservim/nerdtree'
Plug 'vim-test/vim-test'
Plug 'kule/vim-standardrb'
Plug 'jremmen/vim-ripgrep'
call plug#end()

" Lightline
set laststatus=2
if !has('gui_running')
  set t_Co=256
end
set noshowmode

let g:lightline = {
\ 'colorscheme': 'jellybeans',
\ 'active': {
\ 'left': [ [ 'mode', 'paste' ],
\ [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
\ },
\ 'component_function': {
\ 'gitbranch': 'FugitiveHead'
\ },
\ }

" Vim-rainbow
let g:rainbow_active = 1
filetype plugin on

" NERDcommenter
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'

" CTRL P
" let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g ""'
" let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_use_caching = 0
let g:ctrlp_switch_buffer = 0
" " let g:ctrlp_custom_ignore = 'node_modules/'
if executable('rg')
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
endif


" Silver surfer ag
" if executable('ag')
"   let g:ackprg = 'ag --path-to-ignore ~/.ignore --vimgrep'
" end



" AG vim
" let g:ag_prg = 'ag --path-to-ignore ~/.ignore --vimgrep'
let g:ctrlsf_ackprg = 'rg'
" let g:ctrlsf_extra_backend_args = { 'ag': '--path-to-ignore ~/.ignore' }

let g:rspec_command = '!bin/rspec {spec}'

" vim gitgutter
set updatetime=100

" RSPEC
" let g:rspec_command = 'Dispatch rspec {spec}'
"

" AUTOCOMPLETE
filetype plugin on
set omnifunc=syntaxcomplete#Complete

" NerdTree
" autocmd VimEnter * NERDTree | wincmd p
" autocmd BufWinEnter * if getcmdwintype() == "" | silent NERDTreeMirror | endif
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" Disable the damn bell noise when using WSL
set visualbell
set t_vb=

" WSL also doesn't like the cursor, so have to manually set it to fix insert
if &term =~ '^xterm'
  " solid underscore
  let &t_SI .= "\<Esc>[4 q"
  " solid block
  let &t_EI .= "\<Esc>[1 q"
  " 1 or 0 -> blinking block
  " 3 -> blinking underscore
  " Recent versions of xterm (282 or above) also support
  " 5 -> blinking vertical bar
  " 6 -> solid vertical bar
endif

"VIM TEST
let test#ruby#use_binstubs = 0
let test#ruby#bundle_exec = 0
